@page "/call-down"
@using CAPSquadron_Shared.Models
@using CAPSquadron_Shared.Services
@using CAPSquadron_Shared.Services.Flight
@using CAPSquadron_Shared.Services.Meeting
@using CAPSquadron_Shared.Services.MemberAttribute

@inject IMeetingService meetingService
@inject IFlightService FlightService
@inject IRetrieveDataService<Member> MemberService
@inject IMemberAttributeService MemberAttributeService

<div class="container">
    <div class="row">
        <div class="col">
            <h3>CallDown</h3>
        </div>
    </div>

    @if (callDownDates != null && callDownDates.Any())
    {
        <div class="row">
            <div class="col">
                <label for="callDownDateDropdown">Select a Call Down Date:</label>
                <select id="callDownDateDropdown" @onchange="OnDateChanged" class="form-select">
                    <option value="">Select...</option>
                    @foreach (var callDownDate in callDownDates)
                    {
                        <option value="@callDownDate.ToString("yyyy-MM-dd")">@callDownDate.ToString("dd MMM yyyy")</option>
                    }
                </select>
            </div>
        </div>
    }

    @if (selectedCallDownDate.HasValue && flightMemberships.Any())
    {
        @foreach (var flight in flights)
        {
            var flightMembership = flightMemberships.FirstOrDefault(fm => fm.FlightId == flight.Id);
            if (flightMembership != null)
            {
                <div class="row">
                    <div class="col">
                        <div class="fs-3">@flight.Name</div>
                        @foreach (var category in attendanceCategory)
                        {
                            var categoryStyle = category.HasValue
                            ? (category.Value ? "list-group-item-success" : "list-group-item-danger")
                            : "list-group-item-warning";
                            <div class="fs-4">@(category.HasValue ? (category.Value ? "Yes" : "No") : "No Response")</div>
                            <ul class="list-group list-group-flush">
                                @foreach (var member in flightMembership.Members)
                                {
                                    var callDown = flightMembership.CallDown.FirstOrDefault(cd => cd.CapId == member.Capid);
                                    var attending = callDown.Attending;
                                    if (attending == category)
                                    {
                                        <li class="list-group-item @categoryStyle">
                                            <div>@member.Capid - @member.Rank @member.FullName</div>
                                            @if (!string.IsNullOrEmpty(callDown.Comments))
                                            {
                                                <div><span class="fw-bold">Comment:</span> @callDown.Comments</div>
                                            }
                                            @if (!string.IsNullOrEmpty(callDown.Reason))
                                            {
                                                <div><span class="fw-bold">Reason:</span> @callDown.Reason</div>
                                            }
                                            @if (callDown.Requests.Any())
                                            {
                                                <div class="fw-bold">Requests:</div>
                                                <ul>
                                                @foreach (var request in callDown.Requests)
                                                {
                                                    <li>@request</li>
                                                }
                                                </ul>
                                            }
                                        </li>
                                    }
                                }
                            </ul>
                        }
                    </div>
                </div>
            }
        }
    }
</div>

@code {
    private IEnumerable<DateOnly> callDownDates = Enumerable.Empty<DateOnly>();
    private DateOnly? selectedCallDownDate { get; set; } = null;
    private IEnumerable<FlightDto> flights = Enumerable.Empty<FlightDto>();
    private List<FlightMembership> flightMemberships = new List<FlightMembership>();
    private IEnumerable<bool?> attendanceCategory = new[] { true, false, (bool?)null };

    protected override async Task OnInitializedAsync()
    {
        callDownDates = await meetingService.GetCallDownDatesAsync();
    }

    private async Task OnDateChanged(ChangeEventArgs e)
    {
        if (DateOnly.TryParse(e.Value.ToString(), out var selectedDate))
        {
            selectedCallDownDate = selectedDate;
            flights = (await FlightService.GetFlightsAsync())
                .Where(flt => flt.Name.EndsWith("Flight"))
                .OrderBy(flt => flt.Name);

            var callDownResponse = await GetCallDowns(selectedDate);

            flightMemberships.Clear();
            foreach (var flight in flights)
            {
                var members = await GetFlightMembershipAsync(flight);

                flightMemberships.Add(new FlightMembership
                    {
                        FlightId = flight.Id,
                        FlightName = flight.Name,
                        Members = members,
                        CallDown = (from m in members
                                    let myAttendance = callDownResponse.FirstOrDefault(cd => cd.CapId == m.Capid)
                                    select new CallDownResponse
                                    {
                                        CapId = m.Capid,
                                        Attending = myAttendance?.Attending ?? null,
                                        Reason = myAttendance?.Reason,
                                        Comments = myAttendance?.Comments,
                                        Requests = myAttendance?.Requests?.ToList() ?? new List<string>()
                                    })
                    });
            }
        }
        else
        {
            selectedCallDownDate = null;
            flights = Enumerable.Empty<FlightDto>();
            flightMemberships.Clear();
        }
    }

    protected async Task<IEnumerable<CallDownResponse>> GetCallDowns(DateOnly meetingDate)
    {
        return await meetingService.GetCallDownsAsync(meetingDate);
    }

    protected async Task<IEnumerable<Member>> GetFlightMembershipAsync(FlightDto flight)
    {
        var memberCapIds = flight.FlightSergeantIds.Concat(flight.MemberIds).ToList();
        if (flight.FlightCommanderId.HasValue)
        {
            memberCapIds.Add(flight.FlightCommanderId.Value);
        }

        return await MemberService.GetAsync(memberCapIds);
    }

    public class FlightMembership
    {
        public int FlightId { get; set; }
        public string FlightName { get; set; } = string.Empty;
        public IEnumerable<Member> Members { get; set; } = Enumerable.Empty<Member>();
        public IEnumerable<CallDownResponse> CallDown { get; set; } = Enumerable.Empty<CallDownResponse>();
    }
}
