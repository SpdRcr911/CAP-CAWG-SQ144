@page "/flights"
@using CAPSquadron_WebServer.Services
@using CAPSquadron_WebServer.Services.Flight
@using CAPSquadron_WebServer.Services.Attendance
@using CAPSquadron_WebServer.Services.MemberAttribute

@inject IFlightService FlightService
@inject IRetrieveDataService<Member> MemberService
@inject IMemberAttributeService MemberAttributeService
@inject NavigationManager Navigation

@if (flights == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container-fluid">
        <div class="row">
            <div class="col mt-3"><h3>Flights</h3></div>

        </div>
        <div class="row">
            @foreach (var flight in flights.OrderBy(flt => !flt.Name.EndsWith("Flight")).ThenBy(flt => flt.Name))
            {
                var flightMembership = flightMemberships.FirstOrDefault(fm => fm.FlightId == flight.Id);
                <div class="col-sm-12 col-lg-6 col-xl-4 col-xxl-3">
                    <div class="card shadow mb-4">
                        <h5 class="card-header">
                            <a @onclick="() => NavigateToFlight(flight.Id)" href="javascript:void(0);" class="link-offset-2 link-offset-0-hover link-underline link-underline-opacity-0 link-underline-opacity-75-hover">@flight.Name</a>
                        </h5>
                        <div class="card-body">
                            <strong class="card-title">Flight Commander:</strong>
                            <ul class="list-group list-group-flush">
                                <li class="list-group-item">@flightMembership?.FlightCommander?.Rank @flightMembership?.FlightCommander?.FullName</li>
                            </ul>
                            <strong>Flight Sergeants:</strong>
                            <ul class="list-group list-group-flush">
                                @foreach (var sergeant in flightMembership?.FlightSergeants ?? Enumerable.Empty<Member>())
                                {
                                    <li class="list-group-item">@sergeant.Rank @sergeant.FullName</li>
                                }
                            </ul>
                            <strong>Members:</strong>
                            <ul class="list-group list-group-flush list-group-numbered">
                                @foreach (var member in flightMembership?.Members.Where(m => !flight.FlightSergeantIds.Contains(m.Capid) && flight.FlightCommanderId != m.Capid).OrderBy(f => f.FullName).ToList() ?? [])
                                {
                                    <li class="list-group-item">
                                        @member.Rank @member.FullName
                                        
                                        </li>
                                }
                            </ul>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    private IEnumerable<FlightDto> flights = [];
    private List<FlightMembership> flightMemberships = [];
    private IEnumerable<MemberAttributesDto> memberAttributes = [];

    protected override async Task OnInitializedAsync()
    {
        flights = await FlightService.GetFlightsAsync();
        flightMemberships = new List<FlightMembership>();
        memberAttributes = await MemberAttributeService.GetMemberAttributesAsync();

        foreach (var flight in flights)
        {
            var membership = await GetFlightMembershipAsync(flight);
            flightMemberships.Add(new FlightMembership
                {
                    FlightId = flight.Id,
                    FlightCommander = membership.flightCommander,
                    FlightSergeants = membership.flightSergeants.ToList(),
                    Members = membership.members.ToList()
                });
        }
    }

    protected async Task<(Member? flightCommander, IEnumerable<Member> flightSergeants, IEnumerable<Member> members)> GetFlightMembershipAsync(FlightDto flight)
    {
        var memberCapIds = flight.FlightSergeantIds.Concat(flight.MemberIds).ToList();
        if (flight.FlightCommanderId.HasValue)
        {
            memberCapIds.Add(flight.FlightCommanderId.Value);
        }

        var members = await MemberService.GetAsync(memberCapIds);
        var flightCommander = members.FirstOrDefault(m => m.Capid == flight.FlightCommanderId);
        var flightSergeants = members.Where(m => flight.FlightSergeantIds.Contains(m.Capid));
        return (flightCommander, flightSergeants, members.Where(m => flight.MemberIds.Contains(m.Capid)));
    }

    private void NavigateToFlight(int flightId)
    {
        Navigation.NavigateTo($"/flights/{flightId}");
    }

    private class FlightMembership
    {
        public int FlightId { get; set; }
        public Member? FlightCommander { get; set; }
        public List<Member> FlightSergeants { get; set; } = new();
        public List<Member> Members { get; set; } = new();
    }
}
