@page "/flights"
@using CAPSquadron_WebServer.Services
@using CAPSquadron_WebServer.Services.Flight
@using CAPSquadron_WebServer.Services.Attendance
@using CAPSquadron_WebServer.Services.MemberAttribute

@inject IFlightService FlightService
@inject IRetrieveDataService<Member> MemberService
@inject IMemberAttributeService MemberAttributeService
@inject NavigationManager Navigation

<h3>Flights</h3>

@if (flights == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container-fluid">
        <div class="row">
            @foreach (var flight in flights.OrderBy(flt => flt.Name))
            {
                var flightMembership = flightMemberships.FirstOrDefault(fm => fm.FlightId == flight.Id);
                <div class="col-md-4 d-flex align-items-stretch">
                    <div class="card mb-4 flex-fill">
                        <div class="card-body">
                            <h5 class="card-title">
                                <a @onclick="() => NavigateToFlight(flight.Id)" href="javascript:void(0);">@flight.Name</a>
                            </h5>
                            <p class="card-text">
                                <div><strong>Flight Commander:</strong></div>
                                <div style="padding-left: 15px"><span>@flightMembership?.FlightCommander?.Rank @flightMembership?.FlightCommander?.FullName <MemberAttributesComponent Attributes="memberAttributes.FirstOrDefault(ma => ma.Capid == flight.FlightCommanderId)" /></span></div>
                                <strong>Flight Sergeants:</strong>
                                @foreach (var sergeant in flightMembership?.FlightSergeants ?? Enumerable.Empty<Member>())
                                {
                                    <div style="padding-left: 15px">@sergeant.Rank @sergeant.FullName <MemberAttributesComponent Attributes="memberAttributes.FirstOrDefault(ma => ma.Capid == sergeant.Capid)" /> </div>
                                }
                                <div style="padding-top: 15px">
                                    <strong>Members:</strong>
                                    @foreach (var member in flightMembership?.Members.Where(m => !flight.FlightSergeantIds.Contains(m.Capid) && flight.FlightCommanderId != m.Capid).OrderBy(f => f.FullName).ToList() ?? [])
                                    {
                                        <div class="d-flex justify-content-between">
                                            <div class="mr-auto">
                                                <span class="badge rounded-pill btn-primary">@member.Capid</span> @member.Rank @member.FullName
                                            </div>
                                            <div class="ps-1">
                                                <MemberAttributesComponent Attributes="memberAttributes.FirstOrDefault(ma => ma.Capid == member.Capid)" />
                                            </div>
                                        </div>
                                    }
                                </div>
                            </p>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    private IEnumerable<FlightDto> flights = [];
    private List<FlightMembership> flightMemberships = [];
    private IEnumerable<MemberAttributesDto> memberAttributes = [];

    protected override async Task OnInitializedAsync()
    {
        flights = await FlightService.GetFlightsAsync();
        flightMemberships = new List<FlightMembership>();
        memberAttributes = await MemberAttributeService.GetMemberAttributesAsync();

        foreach (var flight in flights)
        {
            var membership = await GetFlightMembershipAsync(flight);
            flightMemberships.Add(new FlightMembership
                {
                    FlightId = flight.Id,
                    FlightCommander = membership.flightCommander,
                    FlightSergeants = membership.flightSergeants.ToList(),
                    Members = membership.members.ToList()
                });
        }
    }

    protected async Task<(Member? flightCommander, IEnumerable<Member> flightSergeants, IEnumerable<Member> members)> GetFlightMembershipAsync(FlightDto flight)
    {
        var memberCapIds = flight.FlightSergeantIds.Concat(flight.MemberIds).ToList();
        if (flight.FlightCommanderId.HasValue)
        {
            memberCapIds.Add(flight.FlightCommanderId.Value);
        }

        var members = await MemberService.GetAsync(memberCapIds);
        var flightCommander = members.FirstOrDefault(m => m.Capid == flight.FlightCommanderId);
        var flightSergeants = members.Where(m => flight.FlightSergeantIds.Contains(m.Capid));
        return (flightCommander, flightSergeants, members.Where(m => flight.MemberIds.Contains(m.Capid)));
    }

    private void NavigateToFlight(int flightId)
    {
        Navigation.NavigateTo($"/flights/{flightId}");
    }

    private class FlightMembership
    {
        public int FlightId { get; set; }
        public Member? FlightCommander { get; set; }
        public List<Member> FlightSergeants { get; set; } = new();
        public List<Member> Members { get; set; } = new();
    }
}
