@page "/cadet-report/{capid:int}"
@using CAPSquadron_WebServer.Services
@using CAPSquadron_WebServer.Services.Flight
@using CAPSquadron_WebServer.Services.CadetTracker
@using CAPSquadron_WebServer.Services.Attendance
@using CAPSquadron_WebServer.Services.MemberAttribute
@using CAPSquadron_WebServer.Components

@inject ICadetTrackerService CadetTrackerService
@inject IRetrieveDataService<Member> MemberService
@inject IMemberAttributeService MemberAttributeService
@inject IAttendanceService AttendanceService


<div class="container">
    @if (cadetTrackers is not null && memberAttribute is not null)
    {
        <CadetTrackerComponent CadetTrackers="new [] { cadetTrackers }" MemberAttributes="new [] { memberAttribute }"></CadetTrackerComponent>
    }
</div>

<CadetAttendanceReport JoinDate="memberAttribute?.JoinDate" GroupedByMonth="groupedByMonth" />

@code {
    [Parameter]
    public int capid { get; set; }

    private MemberAttributesDto? memberAttribute;
    private PersonalCadetTrackerDto? cadetTrackers;
    private Dictionary<DateOnly, bool>? attendanceReports;
    IEnumerable<IGrouping<(int Year, int Month), KeyValuePair<DateOnly, bool>>>? groupedByMonth;

    protected override async Task OnInitializedAsync()
    {
        cadetTrackers = await CadetTrackerService.GetCadetTrackerByCapidAsync(capid);
        memberAttribute = await MemberAttributeService.GetMemberAttributesByCapIdAsync(capid);
        
        attendanceReports = await AttendanceService.GetCadetsAttendanceAsync(capid, memberAttribute.JoinDate);

        groupedByMonth = attendanceReports
                                 .GroupBy(report => (report.Key.Year, report.Key.Month))
                                 .OrderByDescending(group => group.Key.Year)
                                 .ThenByDescending(group => group.Key.Month);

    }
}
